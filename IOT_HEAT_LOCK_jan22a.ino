#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6816129c-fd71-4df4-be9c-599f1b5bdca7 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool smartUnlock;
  CloudTemperature temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <Wire.h>
#include <Adafruit_AMG88xx.h>
#include <ESP32Servo.h>
#include <Keypad.h>
#define Password_Length 7


Adafruit_AMG88xx amg;
Servo servo;
float pixels[AMG88xx_PIXEL_ARRAY_SIZE];

int signalPin = 12;

char Data[Password_Length]; 
char Master[Password_Length] = "123456"; // Adjust password to match your keypad layout
byte data_count = 0;
char customKey;
float total = 0;
const byte ROWS = 4; // 3 rows
const byte COLS = 3; // 4 columns

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}  // Removed unused row; keys remain consistent
};

byte rowPins[ROWS] = {19, 18, 5, 17}; // GPIO18, GPIO5, GPIO17, GPIO16 connect to the row pins
byte colPins[COLS] = {16, 4, 33};  

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  servo.attach(23);
  servo.write(0);
  pinMode(signalPin, OUTPUT);
   
  Serial.begin(9600);
  Serial.println(F("AMG88xx test"));
 
  
  bool status;
    
    
    // default settings
  status = amg.begin();
  if (!status) {
      Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
      while (1);
  }
  delay(100);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  float temperature;
    int count = 0;
    static int count2 = 0;
  
    amg.readPixels(pixels);

    Serial.print("[");
    for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){

      temperature = pixels[i-1];
      total += temperature;
      Serial.print(temperature);
      Serial.print(", ");
      if( i%8 == 0 ) Serial.println();

      if (temperature > 26){
        servo.write(90);
        count2 = 0;
      }else if(temperature < 26)
          count++;
        
    } Serial.println("]"); 
    temp = total/AMG88xx_PIXEL_ARRAY_SIZE;

  if(count == AMG88xx_PIXEL_ARRAY_SIZE) {
    servo.write(0);
    count2++;
  }
          
    Serial.println(count2);
   
  delay(1000);
/*
  while (count2 >= 10) {
  
        
        customKey = customKeypad.getKey();
         // Prompt user to start
        if (customKey) {
            Data[data_count] = customKey; 
            Serial.print(customKey); // Display '*' for each entered character
            data_count++; 
        }

        // When the password is complete
        if (data_count == Password_Length - 1) { 
            Serial.println(); // Move to the next line in Serial Monitor
    
            if (!strcmp(Data, Master)) { // Password correct
                Serial.println("Password Correct! Signal activated.");
                digitalWrite(signalPin, HIGH); // Activate signal
      
                  servo.write(90);
                  Serial.println("servo will turn");
                  delay(10000);
                  digitalWrite(signalPin, LOW); // Deactivate signal
                  count2 = 0; // Reset count2 to exit the loop
                  memset(Data, 0, Password_Length); // copy pasted from else statement
                  data_count = 0;//copy pasted from else statement to clear input
                  break; // Exit the `while` loop
                
            } else { // Password incorrect
                Serial.println("Password Incorrect! Try again.");
                memset(Data, 0, Password_Length); // Clear the input buffer
              for(int i = 0; i < Password_Length-1; i++)
                Data[data_count--] = 0; // Reset the data count
            }
        }
    }
  */
    Serial.println();

    //delay a second
  
}

/*
  Since SmartUnlock is READ_WRITE variable, onSmartUnlockChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSmartUnlockChange()  {
  // Add your code here to act upon SmartUnlock change
  if (smartUnlock == 1){
    Serial.println("Servo write 90");
    servo.write(90);
  } 
}










/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
}